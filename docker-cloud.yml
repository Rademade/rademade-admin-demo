version: "3.5"

networks:
  proxy:
    external: true
  app:

volumes:
  dbdata:
  mongo:
  user-uploads:

configs:
  init-mongo:
    external: true

services:
  nginx:
    image: $REGISTRY_HOST/$PROJECT_IMAGE/nginx:$PROJECT_TAG
    networks:
      - proxy
      - app
    volumes:
      - user-uploads:/static/uploads
    environment:
      PROJECT_NAME: $PROJECT_NAME
    deploy:
      labels:
        - "traefik.port=80"
        - "traefik.docker.network=proxy"
        - "traefik.frontend.rule=Host:$VIRTUAL_HOST"
        - "traefik.frontend.headers.SSLRedirect=true"
      replicas: 1
      placement:
        constraints:
          - node.labels.role == $TARGET_NODE

  app:
    image: $REGISTRY_HOST/$PROJECT_IMAGE/app:$PROJECT_TAG
    environment:
      RAILS_ENV: production
      MONGO_HOST: $MONGO_HOST
      MONGO_USER: $MONGO_USER
      MONGO_DATABASE: $MONGO_DATABASE
      MYSQL_HOST: $MYSQL_HOST
      MYSQL_USER: $MYSQL_USER
      MYSQL_DATABASE: $MYSQL_DATABASE
      RAILS_SERVE_STATIC_FILES: 1   # to make it serve image versions that
                                    # hasn't yet been generated by light_resizer
      PROJECT_NAME: $PROJECT_NAME
      RAILS_MIN_THREADS: $RAILS_MIN_THREADS
      RAILS_MAX_THREADS: $RAILS_MAX_THREADS
      WEB_CONCURRENCY: $WEB_CONCURRENCY
      SECRET_KEY_BASE: $SECRET_KEY_BASE
    networks:
      - app
    volumes:
      - user-uploads:/app/public/uploads
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == $TARGET_NODE

  db:
    image: mariadb:5.5
    volumes:
      - dbdata:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_USER
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_USER
      MYSQL_DATABASE: $MYSQL_DATABASE
    networks:
      - app
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == $TARGET_NODE

  mongo:
    image: mongo:3.2
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_USER
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_USER
      MONGO_INITDB_USER: $MONGO_USER
      MONGO_INITDB_PASSWORD: $MONGO_USER
      MONGO_INITDB_DATABASE: $MONGO_DATABASE
    volumes:
      - mongo:/data/db
    configs:
      - source: init-mongo
        target: /docker-entrypoint-initdb.d/init-mongo.sh
    networks:
      - app
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.role == $TARGET_NODE
